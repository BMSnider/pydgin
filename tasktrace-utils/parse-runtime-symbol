#!/usr/bin/env python
#=========================================================================
# parse-runtime-symbol.py
#=========================================================================
# Uses the nm tools from binutils to display the symbols and size of each
# symbol, filters out the runtime specific functions, and pickles it into a
# list structure used by the pydgin task trace tool

import os
import re
import sys
import subprocess
import csv

#-------------------------------------------------------------------------
# Utility Functions
#-------------------------------------------------------------------------

def execute(cmd):
  #print cmd
  try:
    return subprocess.check_output(cmd, shell=True)
  except  subprocess.CalledProcessError, err:
    print "ERROR: " + err.output

#-------------------------------------------------------------------------
# app_list
#-------------------------------------------------------------------------

app_list = [
  'cilk-matmul-parc-mtpull'
]

#-------------------------------------------------------------------------
# g_runtime_funcs
#-------------------------------------------------------------------------

g_runtime_funcs = {
  "run"          : "wsrt::TaskGroup::run",
  "run_and_wait" : "wsrt::TaskGroup::run_and_wait",
  "wait"         : "wsrt::TaskGroup::wait()", 
  "TaskGroup"    : "wsrt::TaskGroup::TaskGroup()",
}

#-------------------------------------------------------------------------
# inspect_app
#-------------------------------------------------------------------------

maven_nm_cmd = "maven-nm -C --radix=d %(app)s | grep Task"

def inspect_app( app ):
  cmd = maven_nm_cmd % { 'app' : app }
  lines = execute( cmd ).split('\n')
  runtime_funcs_addrs = []
  runtime_funcs_names = []
  for func,string in g_runtime_funcs.iteritems():
    for line in lines[:-1]:
      if re.search(r'\b%(string)s\b' % {'string':string}, line.split()[-1] ):
        runtime_funcs_addrs.append(int(line.split()[0]))
        runtime_funcs_names.append(func)
  return runtime_funcs_addrs,runtime_funcs_names

#-------------------------------------------------------------------------
# main()
#-------------------------------------------------------------------------

def main():
  for app in app_list:
    f = open( app + ".nm", "wb" )
    addrs,names = inspect_app( app )
    csv.writer(f).writerow( addrs )
    csv.writer(f).writerow( names )

main()
