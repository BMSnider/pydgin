#!/usr/bin/env python
#=========================================================================
# tpa-scatter-plot [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --no-spmd           Turn off spmd data-points 
#  --no-wsrt           Turn off wsrt data-points
#  --isavings          Show isavings (turn off iredundancy)
#  --pareto-frontier   Add a pareto-frontier
#
# Author : Shreesha Srinath
# Date   : January 22nd, 2018
#

import argparse
import re
import math
import sys

import pandas as pd

import brg_plot

from common import *

#-------------------------------------------------------------------------
# global variables
#-------------------------------------------------------------------------

g_wsrt_configs = [
  "mimd-wsrt-1-1",
  "mimd-wsrt-1-1000",
  #"conj-cores-wsrt-1-1-2-0-0-1",
  #"conj-cores-wsrt-1-1-2-0-0-1000",
  #"conj-cores-wsrt-1-1-2-0-1-1",
  #"conj-cores-wsrt-1-1-2-0-1-1000",
  "conj-cores-wsrt-1-1-4-0-0-1",
  "conj-cores-wsrt-1-1-4-0-0-1000",
  "conj-cores-wsrt-1-1-4-0-1-1",
  "conj-cores-wsrt-1-1-4-0-1-1000",
  #"conj-cores-wsrt-1-2-2-0-0-1",
  #"conj-cores-wsrt-1-2-2-0-0-1000",
  #"conj-cores-wsrt-1-2-4-0-0-1",
  #"conj-cores-wsrt-1-2-4-0-0-1000",
  #"simt-wsrt-1-1-4-0-1",
  #"simt-wsrt-1-1-4-0-1-1000",
  #"simt-wsrt-1-1-2-0-1",
  #"simt-wsrt-1-1-2-0-1-1000",
]

g_config_labels = [
  "mimd",
  "mimd-hint",
  #"ccores-1-2-rr",
  #"ccores-1-2-rr-hint",
  #"ccores-1-2-pc",
  #"ccores-1-2-pc-hint",
  "ccores-1-4-rr",
  "ccores-1-4-rr-hint",
  "ccores-1-4-pc",
  "ccores-1-4-pc-hint",
  "ccores-2-2",
  "ccores-2-2-hint",
  "ccores-2-4",
  "ccores-2-4-hint",
  "simt-1-4",
  "simt-1-4-hint",
  "simt-1-2",
  "simt-1-2-hint",
]
  #"conj-cores-wsrt-1-1-2-1-1-1000",
  #"conj-cores-wsrt-1-1-2-0-2-1",
  #"conj-cores-wsrt-1-1-2-0-2-500",
  #"conj-cores-wsrt-1-1-2-0-2-1000",
  #"simt-wsrt-1-2-4-0-1",
  #"simt-wsrt-1-2-2-0-500",
  #"simt-wsrt-1-2-4-0-1000",
  #"simt-wsrt-1-2-4-1-1",
  #"simt-wsrt-1-2-2-1-500",
  #"simt-wsrt-1-2-4-1-1000",
  #"simt-wsrt-1-2-2-2-1",
  #"simt-wsrt-1-2-2-2-500",
  #"simt-wsrt-1-2-2-2-1000",
#]

g_spmd_configs = [
  "mimd-spmd-1",
  "mimd-spmd-1-hint",
  #"conj-cores-spmd-1-1-4-0",     
  #"conj-cores-spmd-1-1-4-0-hint",
  "conj-cores-spmd-1-1-4-1",     
  "conj-cores-spmd-1-1-4-1-hint",
  #"conj-cores-spmd-1-2-2-0",     
  #"conj-cores-spmd-1-2-2-0-hint",
  "conj-cores-spmd-1-2-2-1",     
  "conj-cores-spmd-1-2-2-1-hint",
  "simt-spmd-1-1-4",
  "simt-spmd-1-1-4-hint",
  #"simt-spmd-1-2-4",
  #"simt-spmd-1-2-4-hint",
  "simt-spmd-1-2-2",
  "simt-spmd-1-2-2-hint",
]

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--no-spmd",         action="store_false", default=True  )
  p.add_argument( "--no-wsrt",         action="store_false", default=True  )
  p.add_argument( "--isavings",        action="store_true",  default=False )
  p.add_argument( "--pareto-frontier", action="store_true",  default=False )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# is_pareto_front()
#-------------------------------------------------------------------------
# reference:
# http://hinnefe2.github.io/python/tools/2015/09/21/mario-kart.html

def is_pareto_front(row, stats, xlabel, ylabel):
  x = row[xlabel]
  y = row[ylabel]

  # look for points with the same y value but larger x value
  is_max_x = stats.loc[stats[ylabel]==y].max()[xlabel] <= x
  # look for points with the same x value but larger y value
  is_max_y = stats.loc[stats[xlabel]==x].max()[ylabel] <= y

  # look for points that are larger in both x and y
  is_double = len(stats.loc[(stats[xlabel]>x) & (stats[ylabel]>y)])==0

  return is_max_x and is_max_y and is_double

#-------------------------------------------------------------------------
# plot
#-------------------------------------------------------------------------

def plot( df, spmd, wsrt, isavings, pareto_frontier ):

  configs = []
  kernels_list = []
  if spmd:
    configs += g_spmd_configs
    kernels_list += app_spmd_list
  if wsrt:
    configs += g_wsrt_configs
    kernels_list += app_list

  #-----------------------------------------------------------------------
  # scatter plot
  #-----------------------------------------------------------------------

  # create plot options dict
  opts = brg_plot.PlotOptions()
  attribute_dict = \
  {
    'show'            : False,
    'plot_type'       : 'scatter',
    'figsize'         : (16.0, 28.0),
    'rotate_labels'   : False,
    'markersize'      : 60,
    'labels_fontsize' : 1,
    'legend_enabled'  : False,
  }
  for name, value in attribute_dict.iteritems():
    setattr( opts, name, value )

  if spmd:
    opts.figsize = (16.0,16.0)

  # plot array 
  opts.num_cols = 4
  opts.num_rows = int( math.ceil( len(kernels_list)/4.0 ) )
  
  index = 0
  for app in  kernels_list:
    # collect data
    if pareto_frontier:
      stats = pd.DataFrame()
    stats_label = 'isavings' if isavings else 'iredundancy'
    data        = []
    for config in configs:
      try:
        speedup = df[(df.config == config) & (df.app == app)].iloc[0]['speedup']
        value   = df[(df.config == config) & (df.app == app)].iloc[0][stats_label]
        data.append( [[speedup, value]] )
        if pareto_frontier:
          stats = stats.append( df.loc[(df.config == config) & (df.app == app), ['config', 'speedup', stats_label]] )
      except:
        data.append( [[float('nan')]*2] )
        if pareto_frontier:
          stats = stats.append( [float('nan')]*2 )
      #print "{} {} {} {}".format( app, config, data[-1][0][0], data[-1][0][1] )

    # add plot
    opts.data           = data
    opts.labels         = [[],g_config_labels]
    opts.legend_ncol    = len(configs)
    opts.plot_idx       = index+1
    #opts.colors         = brg_plot.colors['unique20']
    opts.colors         = brg_plot.colors['qualitative_paired']
    opts.pareto_points  = pareto_frontier
    opts.title          = app

    if pareto_frontier:
      is_pareto = stats.apply(lambda row: is_pareto_front(row, stats, 'speedup', stats_label),axis=1)
      config_pareto = stats.ix[is_pareto].sort_values(by='speedup')
      opts.pareto_data = [config_pareto['speedup'].values, config_pareto[stats_label].values]

    if index % opts.num_cols == 0:
      opts.legend_enabled = True
      opts.legend_ncol    = 3
      opts.legend_bbox    = (1.8,1.1,1.,0.1)
    else:
      opts.legend_enabled = False
    if index == len(kernels_list) -1:
      opts.file_name       = 'scatter-all.pdf'
      opts.subplots_hspace = 0.5
      opts.fig.text(0.5, 0, 'Speedup', ha='center', fontsize=14)
      if isavings:
        opts.fig.text(-0.02, 0.5, 'Insn. Savings', va='center', rotation='vertical', fontsize=14)
      else:
        opts.fig.text(-0.02, 0.5, 'Insn. Redundancy', va='center', rotation='vertical', fontsize=14)

    index = index + 1

    # plot data
    brg_plot.add_plot( opts )

#-------------------------------------------------------------------------
# main
#-------------------------------------------------------------------------

if __name__ == "__main__":
  opts = parse_cmdline()

  df = pd.read_csv( "sim-results.csv" )

  # get the baseline dataframe for serial configs
  base_df = df[df.config == "serial"].copy()

  # loop through configs and normalize results
  for app in app_list:
    # serial steps
    ts, = base_df[(base_df.app == app_normalize_map[app])]['steps']
    # update steps to speedup inplace
    df.loc[(df.app == app) & (df.config != 'serial'), ['steps']] = \
      float(ts) / df.loc[(df.app == app) & (df.config != 'serial'), ['steps']]

  # replace any value that is zero with float 'nan' to skip plotting
  df[df==0] = float('nan')

  # column steps renamed to speedup
  df = df.rename(columns = { 'steps': 'speedup' })

  # save the results
  df.to_csv('sim-speedup-results.csv',index=False)

  # option to plot only spmd data
  spmd = opts.no_spmd

  # option to plot only wsrt data
  wsrt = opts.no_wsrt

  # option to isavings or iredundancy
  isavings = opts.isavings

  # option to show the pareto frontier
  pareto_frontier = opts.pareto_frontier

  # create plots
  plot( df, spmd, wsrt, isavings, pareto_frontier )
