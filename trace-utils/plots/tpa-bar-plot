#!/usr/bin/env python
#=========================================================================
# tpa-bar-plot [options]
#=========================================================================
#
#  -h --help           Display this message
#
#  --no-spmd           Turn off spmd data-points 
#  --no-wsrt           Turn off wsrt data-points
#  --isavings          Show isavings (turn off iredundancy)
#
# Author : Shreesha Srinath
# Date   : January 23rd, 2018
#

import argparse
import re
import math
import sys

import pandas as pd

import brg_plot

from common import *

#-------------------------------------------------------------------------
# global variables
#-------------------------------------------------------------------------

g_wsrt_configs = [
  "mimd-wsrt-1",
  "mimd-wsrt-1-hint",
  #"conj-cores-wsrt-1-1-4-0",     
  #"conj-cores-wsrt-1-1-4-0-hint",
  #"conj-cores-wsrt-1-1-4-1",     
  #"conj-cores-wsrt-1-1-4-1-hint",
  #"conj-cores-wsrt-1-2-2-0",     
  #"conj-cores-wsrt-1-2-2-0-hint",
  #"conj-cores-wsrt-1-2-2-1",     
  #"conj-cores-wsrt-1-2-2-1-hint",
  "simt-wsrt-1-1-4",
  "simt-wsrt-1-1-4-hint",
  "simt-wsrt-1-2-4",
  "simt-wsrt-1-2-4-hint",
  "simt-wsrt-1-2-2",
  "simt-wsrt-1-2-2-hint",
]

g_spmd_configs = [
  "mimd-spmd-1",
  "mimd-spmd-1-hint",
  #"conj-cores-spmd-1-1-4-0",     
  #"conj-cores-spmd-1-1-4-0-hint",
  #"conj-cores-spmd-1-1-4-1",     
  #"conj-cores-spmd-1-1-4-1-hint",
  #"conj-cores-spmd-1-2-2-0",     
  #"conj-cores-spmd-1-2-2-0-hint",
  #"conj-cores-spmd-1-2-2-1",     
  #"conj-cores-spmd-1-2-2-1-hint",
  "simt-spmd-1-1-4",
  "simt-spmd-1-1-4-hint",
  "simt-spmd-1-2-4",
  "simt-spmd-1-2-4-hint",
  "simt-spmd-1-2-2",
  "simt-spmd-1-2-2-hint",
]

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )

  # Standard command line arguments

  p.add_argument( "-h", "--help",    action="store_true" )

  # Additional commane line arguments for the simulator

  p.add_argument( "--no-spmd",         action="store_false", default=True  )
  p.add_argument( "--no-wsrt",         action="store_false", default=True  )
  p.add_argument( "--isavings",        action="store_true",  default=False )

  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# plot
#-------------------------------------------------------------------------

def plot( df, spmd, wsrt, isavings ):

  configs = []
  kernels_list = []
  if spmd:
    configs += g_spmd_configs
    kernels_list += app_spmd_list
  if wsrt:
    configs += g_wsrt_configs
    kernels_list += app_list

  #-----------------------------------------------------------------------
  # scatter plot
  #-----------------------------------------------------------------------

  # create plot options dict
  opts = brg_plot.PlotOptions()
  attribute_dict = \
  {
    'show'            : False,
    'plot_type'       : 'bar',
    'figsize'         : (16.0, 8.0),
    'rotate_labels'   : False,
    'markersize'      : 50,
    'labels_fontsize' : 1,
    'legend_enabled'  : False,
    'bar_width'       : 0.7,
  }
  for name, value in attribute_dict.iteritems():
    setattr( opts, name, value )

  # collect data
  stats_label = 'isavings' if isavings else 'iredundancy'
  redun_data = []
  steps_data = []
  for app in  kernels_list:
    temp_steps = []
    temp_redun = []
    for config in configs:
      try:
        temp_steps.append( df.loc[(df.app == app) & (df.config == config), ['speedup']].iloc[0]['speedup'] )
        temp_redun.append( df.loc[(df.app == app) & (df.config == config), [stats_label]].iloc[0][stats_label] )
      except:
        temp_steps.append(float('nan'))
        temp_redun.append(float('nan'))
    steps_data.append( temp_steps )
    redun_data.append( temp_redun )

  # set plot options
  opts.num_cols = 1
  opts.num_rows = 2

  # plot redundancy
  opts.plot_idx       = 1
  opts.data           = redun_data 
  opts.legend_ncol    = len(configs)/2
  opts.rotate_labels  = True
  opts.labels         = [kernels_list,configs]
  opts.colors         = brg_plot.colors['qualitative_paired']
  if not isavings:
    opts.normalize_line = 75.0
    opts.ylabel         = "Percent Redundant Insns."
  else:
    opts.normalize_line = 100.0
    opts.ylabel         = "Potential Insns. Savings"
  opts.legend_enabled = True

  brg_plot.add_plot( opts )

  # plot performance
  opts.subplots_hspace = 0.5
  opts.plot_idx        = 2
  opts.data            = steps_data 
  opts.legend_ncol     = len(configs)/2
  opts.rotate_labels   = True
  opts.labels          = [kernels_list,configs]
  opts.colors          = brg_plot.colors['qualitative_paired']
  opts.normalize_line  = 4
  opts.ylabel          = "Perf. Normalized to Serial"
  opts.legend_enabled  = True
  opts.file_name       = 'bar-plot.pdf'

  brg_plot.add_plot( opts )

#-------------------------------------------------------------------------
# main
#-------------------------------------------------------------------------

if __name__ == "__main__":
  opts = parse_cmdline()

  df = pd.read_csv( "sim-results.csv" )

  # get the baseline dataframe for serial configs
  base_df = df[df.config == "serial"].copy()

  # loop through configs and normalize results
  for app in app_list:
    # serial steps
    ts, = base_df[(base_df.app == app_normalize_map[app])]['steps']
    # update steps to speedup inplace
    df.loc[(df.app == app) & (df.config != 'serial'), ['steps']] = \
      float(ts) / df.loc[(df.app == app) & (df.config != 'serial'), ['steps']]

  # replace any value that is zero with float 'nan' to skip plotting
  df[df==0] = float('nan')

  # column steps renamed to speedup
  df = df.rename(columns = { 'steps': 'speedup' })

  # option to plot only spmd data
  spmd = opts.no_spmd

  # option to plot only wsrt data
  wsrt = opts.no_wsrt

  # option to isavings or iredundancy
  isavings = opts.isavings

  # create plots
  plot( df, spmd, wsrt, isavings )
