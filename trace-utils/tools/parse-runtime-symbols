#!/usr/bin/env python
#=========================================================================
# parse-runtime-symbols
#=========================================================================
# Author : Shreesha Srinath
# Date   : September 16th, 2017
#
# Uses the nm tools from binutils to display the symbols and size of each
# symbol, filters out the runtime specific functions, and pickles it into a
# list structure used by the pydgin task trace tool

import os
import re
import sys
import subprocess
import csv

sys.path.extend(['../scripts'])
from apps import *

#-------------------------------------------------------------------------
# Utility Functions
#-------------------------------------------------------------------------

def execute(cmd):
  #print cmd
  try:
    return subprocess.check_output(cmd, shell=True)
  except  subprocess.CalledProcessError, err:
    print "ERROR: " + err.output

#-------------------------------------------------------------------------
# g_runtime_funcs
#-------------------------------------------------------------------------

g_runtime_funcs = {
  "wsrt_run"           : "wsrt::TaskGroup::run",
  "wsrt_run_and_wait"  : "wsrt::TaskGroup::run_and_wait",
  "wsrt_wait"          : "wsrt::TaskGroup::wait()", 
  "wsrt_TaskGroup"     : "wsrt::TaskGroup::TaskGroup()",
  "wsrt_init"          : "wsrt::task_scheduler_init()",
  "wsrt_end"           : "wsrt::task_scheduler_end()",
  "tpart_run"          : "tpart::TaskGroup::run",
  "tpart_run_and_wait" : "tpart::TaskGroup::run_and_wait",
  "tpart_wait"         : "tpart::TaskGroup::wait()", 
  "tpart_TaskGroup"    : "tpart::TaskGroup::TaskGroup()",
  "tpart_init"         : "tpart::task_scheduler_init()",
  "tpart_end"          : "tpart::task_scheduler_end()",
}

#-------------------------------------------------------------------------
# inspect_app
#-------------------------------------------------------------------------

maven_nm_cmd = "maven-nm -C --radix=d %(app)s | grep 'wsrt\|tpart'"

def inspect_app( app_kernel ):
  app = os.path.dirname(os.path.abspath(__file__)) + "/../scripts/links/" + app_kernel
  cmd = maven_nm_cmd % { 'app' : app }
  lines = execute( cmd ).split('\n')
  runtime_funcs_addrs = []
  runtime_funcs_names = []
  for func,string in g_runtime_funcs.iteritems():
    for line in lines[:-1]:
      if re.search(r'\b%(string)s\b' % {'string':string}, line.split()[-1] ):
        runtime_funcs_addrs.append(int(line.split()[0]))
        runtime_funcs_names.append(func)
  return runtime_funcs_addrs,runtime_funcs_names

#-------------------------------------------------------------------------
# main()
#-------------------------------------------------------------------------

def main():
  res_dir  = sys.argv[1]
  for app in app_dict.keys():
    try:
      addrs,names = inspect_app( app )
      f = open( res_dir + "/" + app + ".nm", "wb" )
      csv.writer(f).writerow( addrs )
      csv.writer(f).writerow( names )
      addrs = [ hex(x) for x in addrs ]
      csv.writer(f).writerow( addrs )
    except:
      print "%(app)s is not a task-parallel program\n" % { 'app' : app }

main()
